/* Samantha Voigt and Aline Mitsuzawa
 * 
 * 
 */

import java.util.*;
import java.io.*;
import java.lang.Integer;

public class ContactBook<T> {
	
	private Hashtable<String, Contact> searchTable;
	
	//empty constructor used first time using the program
	public ContactBook() {
		searchTable = new Hashtable<String, Contact>(); // create a blank hashtable
	}
	
	/* constructor that takes in a file of information
	 * makes contact objects
	 * should be called once the program is initialized to read previous user data
	 */
	public ContactBook(String srcFile) {
		searchTable = new Hashtable<String, Contact>();
		try {
			Scanner scan = new Scanner(new File(srcFile));
			while(scan.hasNextLine()) { 
				String line = scan.nextLine(); // one line represents a single contact
				String[] fields = line.split("#"); // line is split up by # symbols
				Calendar dateContacted = Calendar.getInstance(); // sets up a calendar with default date/month/year (today)
				try {
					setCalFromString(fields[8], dateContacted); // if there is a date set, update the calendar using the helper method to the given date/month/year of last contact
				} catch (ArrayIndexOutOfBoundsException ex) { } // don't do anything -- keep the default date/month/year Calendar
				Contact newPerson = new Contact(fields[0], fields[1], fields[2], fields[3], fields[4], fields[5], fields[6], fields[7], dateContacted);
				searchTable.put(newPerson.getName(), newPerson); // add new contact to the hashtable
			}
			scan.close();
		} catch (IOException ex) { 
			System.out.println(ex);
		}
	}
	
	// helper method that takes a typical "mm/dd/yyyy" formatted String and saves that information into a given Calendar object
	private void setCalFromString(String mmddyyyy, Calendar cal) { 
		String[] dateArray = mmddyyyy.split("/");
		int month = Integer.parseInt(dateArray[0])-1;
		int date = Integer.parseInt(dateArray[1]);
		int year = Integer.parseInt(dateArray[2]);
		cal.set(year, month, date);
	}
	
	// probably won't be able to use this bc ... problems
//	public LinkedList<Contact> contactBookSearch(String category, String specificCriteria) {
//		return null;
//	}
//	
	
	//**********************************************************************
	//*********************** SEARCHING METHODS ****************************
	//**********************************************************************
	
	// returns a linkedList of all contacts that fit the criteria given for searching by name. Not case sensitive.
	public LinkedList<Contact> searchByName(String criteria) { 
		LinkedList<Contact> results = new LinkedList<Contact>();
		Enumeration<Contact> vals = searchTable.elements(); 
		while (vals.hasMoreElements()) { // loop through each contact
			Contact elt = vals.nextElement();
			String name = elt.getName().toLowerCase().replace(" ", "");
			if (name.contains(criteria.toLowerCase().replace(" ", ""))) results.add(elt);
		}
		return results;
	}
	
	// returns a linkedList of all contacts that fit the criteria given for searching by meeting location. Not case sensitive.
	public LinkedList<Contact> searchByMeetingLoc(String criteria) { 
		LinkedList<Contact> results = new LinkedList<Contact>(); 
		Enumeration<Contact> vals = searchTable.elements();
		while (vals.hasMoreElements()) { 
			Contact elt = vals.nextElement(); 
			String meetingLoc = elt.getMeetingLoc().toLowerCase().replace(" ", "");
			if (meetingLoc.contains(criteria.toLowerCase().replace(" ", ""))) results.add(elt);
		}
		return results;
	}
	
	// returns a linkedList of all contacts that fit the criteria given for searching by location. Not case sensitive.
	public LinkedList<Contact> searchByLocation(String criteria) { 
		LinkedList<Contact> results = new LinkedList<Contact>(); 
		Enumeration<Contact> vals = searchTable.elements();
		while (vals.hasMoreElements()) { 
			Contact elt = vals.nextElement(); 
			String location = elt.getLocation().toLowerCase().replace(" ", "");
			if (location.contains(criteria.toLowerCase().replace(" ", ""))) results.add(elt);
		}
		return results;
	}
	
	// returns a linkedList of all contacts that fit the criteria given for searching by company or school. Not case sensitive.
	public LinkedList<Contact> searchByCompanyOrSchool(String criteria) { 
		LinkedList<Contact> results = new LinkedList<Contact>(); 
		Enumeration<Contact> vals = searchTable.elements();
		while (vals.hasMoreElements()) { 
			Contact elt = vals.nextElement(); 
			String companyOrSchool = elt.getCompanyOrSchool().toLowerCase().replace(" ", "");
			if (companyOrSchool.contains(criteria.toLowerCase().replace(" ", ""))) results.add(elt);
		}
		return results;
	}
	
	// returns a linkedList of all contacts that fit the criteria given for searching by phone. Not case sensitive.
	public LinkedList<Contact> searchByPhone(String criteria) { 
		LinkedList<Contact> results = new LinkedList<Contact>(); 
		Enumeration<Contact> vals = searchTable.elements();
		while (vals.hasMoreElements()) { 
			Contact elt = vals.nextElement(); 
			String phone = elt.getPhone().toLowerCase().replace(" ", "").replace("-", "");
			if (phone.contains(criteria.toLowerCase().replace(" ", "").replace("-", ""))) results.add(elt);
		}
		return results;
	}
	
	// returns a linkedList of all contacts that fit the criteria given for searching by email. Not case sensitive.
	public LinkedList<Contact> searchByEmail(String criteria) { 
		LinkedList<Contact> results = new LinkedList<Contact>(); 
		Enumeration<Contact> vals = searchTable.elements();
		while (vals.hasMoreElements()) { 
			Contact elt = vals.nextElement(); 
			String email = elt.getEmail().toLowerCase().replace(" ", "");
			if (email.contains(criteria.toLowerCase().replace(" ", ""))) results.add(elt);
		}
		return results;
	}
	
	// returns a linkedList of all contacts that fit the criteria given for searching by other contact info. Not case sensitive. Spaces don't matter.
	public LinkedList<Contact> searchByOtherContact(String criteria) { 
		LinkedList<Contact> results = new LinkedList<Contact>(); 
		Enumeration<Contact> vals = searchTable.elements();
		while (vals.hasMoreElements()) { 
			Contact elt = vals.nextElement(); 
			String otherContact = elt.getOtherContact().toLowerCase().replace(" ", "");
			if (otherContact.contains(criteria.toLowerCase().replace(" ", ""))) results.add(elt);
		}
		return results;
	}

	// returns a linkedList of all contacts that fit the criteria given for searching by other contact info. Not case sensitive. Spaces don't matter.
	public LinkedList<Contact> searchByNotes(String criteria) { 
		LinkedList<Contact> results = new LinkedList<Contact>(); 
		Enumeration<Contact> vals = searchTable.elements();
		while (vals.hasMoreElements()) { 
			Contact elt = vals.nextElement(); 
			String notes = elt.getNotes().toLowerCase().replace(" ", "");
			if (notes.contains(criteria.toLowerCase().replace(" ", ""))) results.add(elt);
		}
		return results;
	}
	
	//**************************************************************************************
	
	// ******** GET CONTACT BY NAME ***********
    // use this method to get the contact from an entire name -- for displaying information to the right of the table
    public Contact getContactByName(String name) {
        return searchTable.get(name);
    }

    // ********* GET ALL NAMES ***********
    // Returns an array of Strings that has the first and last name of all Contacts in the hashtable.
	public String[] getAllNames() {
		String[] names = new String[searchTable.size()]; // provide enough space for all the names
		Enumeration<String> keys = searchTable.keys();
		int i = 0;
		while (keys.hasMoreElements()) { 
			names[i] = keys.nextElement();
			i++;
		}
		return names;
	}
	
	// ************* ADD CONTACT *************
	// adds a contact to the contact book
	public void addContact(Contact person) { 
		searchTable.put(person.getName(), person);
	}
	
	// ********** EDIT CONTACT ***************
	public void editContact(String oldName, String newName, String meetingLoc, String location, String companyOrSchool, String phone, String email, String otherContact, String notes, String lastContacted) { 
		Contact c = searchTable.get(oldName); 
		c.setName(newName);
		c.setMeetingLoc(meetingLoc);
	}
	
	// don't know which one of the next two methods will end up being the most useful... or both?

	// ******* DELETE CONTACT BY NAME ********
	// deletes a contact by passing in a name
	public void deleteContactByName(String name) { 
		searchTable.remove(name);
	}
	
//	// ******* DELETE CONTACT BY OBJ *********
//	// deletes a contact by passing in an object
//	public void deleteContactByObject(Contact person) { 
//		searchTable.remove(person.getName());
//	}
	
	// ********** TO STRING ************
	public String toString() { 
		return searchTable.toString();
	}
}
